
Plan for the chat app

- make a SPA minimalist front end with vanilla js and html/css
    - that means the first course of action would be to create a function to display the page into "content" as well as a pages object/dictionary
    - on window load, query an API endpoint to see if the user is logged in using localStorage (maybe using sessions in express?)
        - use localStorage to store the username
        - if there is a username, check if the username exists on the server (to prevent injection)
        - if it does, then we can flash a green bar that says "Logged in as ${username}"
        - Otherwise, we redirect to the login page and ask them to select a username
        - once the user is authenticated then query for the chats and use a client-side function to load them in
        - make sure for each chat sent, before relaying the info, we verify the user on the server-side
    - alternatively, have socket connect and use that to check if the user is logged in (by sending an "authenticated" event once the user is logged in for "user joined" notifications).
    - if the user logged in, then display the chat page. Otherwise, display the login page.
    - play sounds on user connect and message send/receive
    - for the client-side socket set auto-connect to false and manually connect after verifying the username
    - make a REST API using express and a mongoose database
    - To query for users: "GET myserver/users/:username" should return the user object (or username for the MVP) if it exists, or a null if it doesn't
        - maybe for my users use the schema:
        user = {
            id: Date.now().toString(), //when the account was made. will not exist for the MVP
            username: username
        }
        - and for chats use: 
        chat = {
            id: Date.now().toString() /* + chat.sentBy? */, //on the server side
            content: input.value,
            sentBy: username,
            timeSent: Date.now().toString(), //this is on the client side
        }
    - To create a new user: "POST myserver/users/:username" should add the username to the database of users
    - To query for chats: myserver/chats should return an array containing a list of chat objects
    - On the socket "message" event, call a function "addToDatabase" to store the chat in the database
    - Maybe on the server-side, verify that the user "sentBy" field of the message is an actual user (to prevent injection)
        - this would just use the "getUserByUsername" function
- make a global chat first, push to internet and then work on more features like
    - different rooms and private messaging
    - chat history


- decision tree for login 
    - if there is no/invalid username, create a user
        - that means wait for a button click, then 
            - check that username is valid
                - alert if it isn't
            - check if it exists and if not 
                - createUser
    - if there is username //valid at this point
        - if it is in the server then print Logged in (user)
        - but it is not in the db, 
            - createUser
            - print Welcome (user)!

    THERE IS NO USER ALREADY EXISTS --> UNLESS MAYBE THE USER IS ALREADY IN THE LIST OF ACTIVE USERS